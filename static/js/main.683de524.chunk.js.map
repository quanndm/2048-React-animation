{"version":3,"sources":["components/Tile.jsx","components/Cell.jsx","assets/img/try-again.gif","components/GameOverlay.jsx","helper/index.js","components/Board.jsx","hooks/useEvent.jsx","App.js","index.js"],"names":["Tile","tile","classArray","push","value","mergedInto","row","column","isNew","hasMoved","fromRow","toRow","fromColumn","toColumn","classes","join","className","Cell","GameOverlay","onRestart","board","hasWon","hasLost","onClick","src","TryAgainLogo","alt","style","width","height","cursor","rotateLeft","matrix","rows","length","columns","res","this","oldRow","oldColumn","markForDeletion","id","Board","tiles","cells","score","size","fourProbability","deltaX","deltaY","i","addTile","addRandomTile","setPositions","won","args","hasChanged","currentRow","filter","resultRow","target","targetTile","shift","tile1","tile2","forEach","rowIndex","columnIndex","emptyCells","r","c","cell","Math","random","newValue","direction","clearOldTiles","moveLeft","canMove","dir","newRow","newColumn","BoardView","useState","setBoard","event","handler","passive","useEffect","window","addEventListener","removeEventListener","useEvent","keyCode","newBoard","Object","assign","create","getPrototypeOf","move","resetGame","map","col","colIndex","titl","index","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.683de524.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Tile = ({tile}) => {\r\n    let classArray = [\"tile\"];\r\n    classArray.push('tile'+tile.value);\r\n    if (!tile.mergedInto) {\r\n        classArray.push(`position_${tile.row}_${tile.column}`);\r\n    }\r\n    if (tile.mergedInto) {\r\n        classArray.push(\"merged\");\r\n    }\r\n    if(tile.isNew()){\r\n        classArray.push(\"new\");\r\n    }\r\n    if (tile.hasMoved()) {\r\n        classArray.push(`row_from_${tile.fromRow()}_to_${tile.toRow()}`);\r\n        classArray.push(`column_from_${tile.fromColumn()}_to_${tile.toColumn()}`);\r\n        classArray.push(\"isMoving\");\r\n    }\r\n    const classes = classArray.join(\" \")\r\n    return (\r\n        <span className={classes}>\r\n\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default Tile\r\n","import React from 'react'\r\n\r\nconst Cell = () => {\r\n    return <span className=\"cell\"></span>\r\n}\r\n\r\nexport default Cell\r\n","export default __webpack_public_path__ + \"static/media/try-again.4f930231.gif\";","import React from 'react'\r\nimport TryAgainLogo from \"../assets/img/try-again.gif\";\r\nconst GameOverlay = ({ onRestart, board }) => {\r\n    if (board.hasWon()) {\r\n        return <div className=\"tile2048\"></div>\r\n    } else if (board.hasLost()) {\r\n        return <div className=\"gameOver\" onClick={onRestart}>\r\n            <img src={TryAgainLogo} alt=\"Try again\" style={{\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                cursor: \"pointer\"\r\n            }} />\r\n        </div>\r\n    }\r\n    return null;\r\n}\r\n\r\nexport default GameOverlay","var rotateLeft = function (matrix) {\n  var rows = matrix.length;\n  var columns = matrix[0].length;\n  var res = [];\n  for (var row = 0; row < rows; ++row) {\n    res.push([]);\n    for (var column = 0; column < columns; ++column) {\n      res[row][column] = matrix[column][columns - row - 1];\n    }\n  }\n  return res;\n};\n\nclass Tile {\n  constructor(value, row, column) {\n    this.value = value || 0;\n    this.row = row || -1;\n    this.column = column || -1;\n    this.oldRow = -1;\n    this.oldColumn = -1;\n    this.markForDeletion = false;\n    this.mergedInto = null;\n    this.id = this.id++ || 0;\n  }\n  moveTo(row, column) {\n    this.oldRow = this.row;\n    this.oldColumn = this.column;\n    this.row = row;\n    this.column = column;\n  }\n  isNew() {\n    return this.oldRow === -1 && !this.mergedInto;\n  }\n  hasMoved() {\n    return (\n      (this.fromRow() !== -1 &&\n        (this.fromRow() !== this.toRow() ||\n          this.fromColumn() !== this.toColumn())) ||\n      this.mergedInto\n    );\n  }\n  fromRow() {\n    return this.mergedInto ? this.row : this.oldRow;\n  }\n  fromColumn() {\n    return this.mergedInto ? this.column : this.oldColumn;\n  }\n  toRow() {\n    return this.mergedInto ? this.mergedInto.row : this.row;\n  }\n  toColumn() {\n    return this.mergedInto ? this.mergedInto.column : this.column;\n  }\n}\n\nclass Board {\n  constructor() {\n    this.tiles = [];\n    this.cells = [];\n    this.score = 0;\n    this.size = 4;\n    this.fourProbability = 0.1;\n    this.deltaX = [-1, 0, 1, 0];\n    this.deltaY = [0, -1, 0, 1];\n    for (var i = 0; i < this.size; ++i) {\n      this.cells[i] = [\n        this.addTile(),\n        this.addTile(),\n        this.addTile(),\n        this.addTile(),\n      ];\n    }\n    this.addRandomTile();\n    this.addRandomTile();\n    this.setPositions();\n    this.won = false;\n  }\n  addTile(args) {\n    var res = new Tile(args);\n    this.tiles.push(res);\n    return res;\n  }\n\n  moveLeft() {\n    var hasChanged = false;\n    for (var row = 0; row < this.size; ++row) {\n      var currentRow = this.cells[row].filter((tile) => tile.value !== 0);\n      var resultRow = [];\n      for (var target = 0; target < this.size; ++target) {\n        var targetTile = currentRow.length\n          ? currentRow.shift()\n          : this.addTile();\n        if (currentRow.length > 0 && currentRow[0].value === targetTile.value) {\n          var tile1 = targetTile;\n          targetTile = this.addTile(targetTile.value);\n          tile1.mergedInto = targetTile;\n          var tile2 = currentRow.shift();\n          tile2.mergedInto = targetTile;\n          targetTile.value += tile2.value;\n          this.score += tile1.value + tile2.value;\n        }\n        resultRow[target] = targetTile;\n        this.won |= targetTile.value === 2048;\n        hasChanged |= targetTile.value !== this.cells[row][target].value;\n      }\n      this.cells[row] = resultRow;\n    }\n    return hasChanged;\n  }\n  setPositions() {\n    this.cells.forEach((row, rowIndex) => {\n      row.forEach((tile, columnIndex) => {\n        tile.oldRow = tile.row;\n        tile.oldColumn = tile.column;\n        tile.row = rowIndex;\n        tile.column = columnIndex;\n        tile.markForDeletion = false;\n      });\n    });\n  }\n  addRandomTile() {\n    var emptyCells = [];\n    for (var r = 0; r < this.size; ++r) {\n      for (var c = 0; c < this.size; ++c) {\n        if (this.cells[r][c].value === 0) {\n          emptyCells.push({ r: r, c: c });\n        }\n      }\n    }\n    var index = ~~(Math.random() * emptyCells.length);\n    var cell = emptyCells[index];\n    var newValue = Math.random() < this.fourProbability ? 4 : 2;\n    this.cells[cell.r][cell.c] = this.addTile(newValue);\n  }\n  move(direction) {\n    // 0 -> left, 1 -> up, 2 -> right, 3 -> down\n    this.clearOldTiles();\n    for (var i = 0; i < direction; ++i) {\n      this.cells = rotateLeft(this.cells);\n    }\n    var hasChanged = this.moveLeft();\n    for (let i = direction; i < 4; ++i) {\n      this.cells = rotateLeft(this.cells);\n    }\n    if (hasChanged) {\n      this.addRandomTile();\n    }\n    this.setPositions();\n    return this;\n  }\n  clearOldTiles() {\n    this.tiles = this.tiles.filter((tile) => tile.markForDeletion === false);\n    this.tiles.forEach((tile) => {\n      tile.markForDeletion = true;\n    });\n  }\n  hasWon() {\n    return this.won;\n  }\n  hasLost() {\n    var canMove = false;\n    for (var row = 0; row < this.size; ++row) {\n      for (var column = 0; column < this.size; ++column) {\n        canMove |= this.cells[row][column].value === 0;\n        for (var dir = 0; dir < 4; ++dir) {\n          var newRow = row + this.deltaX[dir];\n          var newColumn = column + this.deltaY[dir];\n          if (\n            newRow < 0 ||\n            newRow >= this.size ||\n            newColumn < 0 ||\n            newColumn >= this.size\n          ) {\n            continue;\n          }\n          canMove |=\n            this.cells[row][column].value ===\n            this.cells[newRow][newColumn].value;\n        }\n      }\n    }\n    return !canMove;\n  }\n}\n\nexport { Board };\n","import React, { useState } from 'react'\r\nimport Tile from \"./Tile\";\r\nimport Cell from './Cell';\r\nimport GameOverlay from \"./GameOverlay\";\r\nimport {Board} from \"../helper/index\";\r\nimport useEvent from '../hooks/useEvent';\r\nconst BoardView = () => {\r\n    const [board, setBoard] = useState(new Board())\r\n    const handleKeyDown = (event)=>{\r\n        if (board.hasWon()) {\r\n            return;\r\n        }\r\n        if (event.keyCode >= 37 && event.keyCode<=40) {\r\n            let direction = event.keyCode - 37;\r\n            let boardClone = Object.assign(Object.create(Object.getPrototypeOf(board)), board);\r\n            let newBoard = boardClone.move(direction);\r\n            setBoard(newBoard);\r\n        }\r\n    }\r\n    useEvent(\"keydown\", handleKeyDown);\r\n    const resetGame = ()=>{\r\n        setBoard(new Board());\r\n    }\r\n    const cells = board.cells.map((row, rowIndex)=>{\r\n        return(\r\n            <div key={rowIndex}>\r\n                {\r\n                    row.map((col, colIndex)=>(\r\n                        <Cell key={colIndex}/>\r\n                    ))\r\n                }\r\n            </div>\r\n        )\r\n    })\r\n    const tiles = board.tiles.filter(titl=>titl.value !== 0).map((titl, index)=>{\r\n                        return <Tile key={index} tile={titl}/>\r\n    })\r\n    return (\r\n        <>\r\n        <div className=\"details-box\">\r\n            <div className=\"resetButton\" onClick={()=>resetGame()}>New game</div>\r\n            <div className=\"score-box\">\r\n                <div className=\"score-header\">\r\n                    SCORE\r\n                </div>\r\n                <div>\r\n                    {board.score}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"board\">\r\n            {cells}\r\n            {tiles}\r\n            <GameOverlay board={board} onRestart={resetGame}/>\r\n        </div>\r\n        </>\r\n        \r\n    )\r\n}\r\n\r\nexport default BoardView\r\n","import { useEffect } from \"react\"\r\n\r\nexport default function useEvent(event, handler, passive = false) {\r\n    useEffect(() => {\r\n        window.addEventListener(event, handler, passive);\r\n\r\n        return function cleanUp() {\r\n            window.removeEventListener(event, handler, passive);\r\n\r\n        };\r\n    });\r\n\r\n}","import React from \"react\";\nimport BoardView from \"./components/Board\";\nfunction App() {\n  return (\n    <>\n      <BoardView />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./scss/styles.scss\";\nimport \"./scss/main.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}